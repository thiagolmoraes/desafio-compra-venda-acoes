Configurar o Diesel para o projeto

    Pode começar seguindo o guia Diesel para instalar alguns binários via cargo. Depois de instalar o Diesel-CLI podemos seguir com:
    
        cargo add diesel -F sqlite
        cargo add dotenvy

    Crie um arquivo .env na raiz do projeto e adicione a variável de ambiente:
    
        DATABASE_URL=database.db

    No CLI execute:
        diesel setup 
            Creating database: database.db
        

        diesel migration generate create_<table_name>
            Creating migrations/2025-01-24-235151_create_users/up.sql
            Creating migrations/2025-01-24-235151_create_users/down.sql


    Isso vai criar dois arquivos no seu projeto: up.sql e down.sql
    Dentro do arquivo up.sql você pode escrever o código SQL para criar a tabela e o outro para deletar a tabela ou fazer alterações
    
    Para executar as migrations execute:
        diesel migration run


    Para dar rollback: 
        diesel migration redo


    Vamos usar também um connection pool R2D2
        cargo add diesel -F r2d2
    
    E na o arquivo lib.rs vamos criar a Pool para utilizar em todo o código
     
      use diesel::r2d2::{self, ConnectionManager};
      use diesel::SqliteConnection;

      pub type DbPool = r2d2::Pool<ConnectionManager<SqliteConnection>>;

Referencias: 
    https://diesel.rs/guides/getting-started



Configurar Rotas para o projeto
    
    Podemos usar a feature macro na libary actix-web para ter uma gestão melhor das Rotas.
         cargo add actix-web -F macros

    Isso permite você criar rotas com metódos diferentes para uma mesma função, isso nos trás suporte a múltiplos métodos	

    use actix_web::{HttpResponse, routes};

    #[routes]
    #[get("/user/{id}")]
    #[post("/user")]
    #[put("/user/{id}")]
    async fn user_handler(req: HttpRequest, path: web::Path<(u32,)>, body: web::Bytes) -> impl Responder {
        match req.method().as_str() {
            "GET" => {
                let user_id = path.into_inner().0;
                HttpResponse::Ok().body(format!("Obtendo usuário com ID: {}", user_id))
            }
            "POST" => {
                let body_str = String::from_utf8_lossy(&body);
                HttpResponse::Created().body(format!("Criando novo usuário com dados: {}", body_str))
            }
            "PUT" => {
                let user_id = path.into_inner().0;
                let body_str = String::from_utf8_lossy(&body);
                HttpResponse::Ok().body(format!("Atualizando usuário {} com dados: {}", user_id, body_str))
            }
            _ => HttpResponse::MethodNotAllowed().finish(),
        }
    }

    
